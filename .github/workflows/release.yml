name: release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "semver version without the v prefix (e.g. 1.2.3)"
        required: true
        type: string
      prerelease:
        description: "mark as prerelease (overrides auto-detect)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare:
    name: prepare tag
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.meta.outputs.tag_name }}
      prerelease: ${{ steps.meta.outputs.prerelease }}
    steps:
      - name: compute tag and prerelease
        id: meta
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=v${{ inputs.version }}" >> "$GITHUB_OUTPUT"
            if [ "${{ inputs.prerelease }}" = "true" ]; then
              echo "prerelease=true" >> "$GITHUB_OUTPUT"
            else
              echo "prerelease=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "tag_name=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
            case "${GITHUB_REF_NAME}" in
              *-*) echo "prerelease=true" >> "$GITHUB_OUTPUT";;
              *)   echo "prerelease=false" >> "$GITHUB_OUTPUT";;
            esac
          fi

      - name: create tag (manual only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/github-script@v7
        env:
          TAG_NAME: ${{ steps.meta.outputs.tag_name }}
        with:
          script: |
            const tag = process.env.TAG_NAME;
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tag}`,
              });
              core.info(`tag ${tag} already exists`);
            } catch (e) {
              if (e.status === 404) {
                const sha = context.sha;
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/tags/${tag}`,
                  sha,
                });
                core.info(`created tag ${tag} at ${sha}`);
              } else {
                throw e;
              }
            }

  build:
    name: build artifacts
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: install rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: cache cargo
        uses: Swatinem/rust-cache@v2

      - name: build
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: package artifact
        run: |
          bin_name="soil"
          target_dir="target/${{ matrix.target }}/release"
          artifact_name="${bin_name}-${{ matrix.target }}"
          mkdir -p dist
          if [[ "${{ matrix.os }}" == macos-* ]]; then
            tar -czf "dist/${artifact_name}.tar.gz" -C "$target_dir" "$bin_name"
          else
            tar -czf "dist/${artifact_name}.tar.gz" -C "$target_dir" "$bin_name"
          fi

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: dist/*.tar.gz

  release:
    name: create github release
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          draft: false
          prerelease: ${{ needs.prepare.outputs.prerelease }}
          generate_release_notes: true
          files: |
            dist/**/**/*.tar.gz
